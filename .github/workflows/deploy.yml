name: Deployment

on:


  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true
        
defaults:
  run:
    working-directory: ansible
        
env: 
  ENVIRONMENT: ${{ inputs.environment || github.event.schedule=='*/10 * * * *'  && 'QWERTY' || '123' }}
          
jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: 
      name: ${{ inputs.environment || github.event.schedule=='*/10 * * * *'  && 'QWERTY' || '123' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
#       - name: test
#         run: |
#           mkdir ~/.ssh
#           ssh-keyscan 134.209.152.184 >> ~/.ssh/known_hosts
        
#       - name: Set up SSH
#         uses: webfactory/ssh-agent@v0.5.0
#         with:
#           ssh-private-key: ${{ secrets.PRIVATE_KEY }}
        
      - name: id rsa
        env:
          TOKEN: ${{ secrets.PRIVATE_KEY }}
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "$TOKEN" > ~/.ssh/id_rsa
          echo $TOKEN
        
#       - name: test1
#         run: |
#           scp root@$PUB_IP:/etc/nginx/sites-available/parity parity
#           sed -E "s/listen [0-9.]+:/listen $PUB_IP:/g" parity > new_parity
#           scp new_parity root@$PUB_IP:/etc/nginx/sites-available/parity
#           ssh root@$PUB_IP 'systemctl restart nginx'
#         env:
#           PUB_IP: 134.209.152.184

      - name: Install requirements
        run: |
          pip install ansible
          sudo apt-get install -y python3-netaddr 


      - name: qwe
        run: |
          echo "PUBLIC_KEY=$(yq -r .ssh_users.deployer-gha users.yml)" >> $GITHUB_ENV
          

      - name: Intall doctl
        uses: digitalocean/action-doctl@v2
        with:
            token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: test
        run: doctl projects list
        
      - name: test
        run: doctl projects update beab609f-428f-42ce-b5a6-fadfa9d9d7cf --is_default=true

      - name: Create SSH key in DigitalOcean
        id: create_ssh_key
        run: |
         random_name=$(openssl rand -hex 4)
         echo "::set-output name=ssh::$(doctl compute ssh-key create ${random_name}-ssh-key --public-key "$PUBLIC_KEY" --format ID --no-header)"
           
      - name: Create Droplet
        run: doctl compute droplet create deploy-test --image debian-10-x64 --region nyc1 --size s-1vcpu-2gb --ssh-keys "${{ steps.create_ssh_key.outputs.ssh }}"

      - name: Wait create Droplet
        run: sleep 40s
        
      - name: Get Droplet IP
        id: droplet
        run: |
         echo "::set-output name=ip::$(doctl compute droplet list deploy-test --format PublicIPv4 --no-header)"
         echo "::set-output name=id::$(doctl compute droplet list deploy-test --format ID --no-header)"

      - name: Create Volume
        id: volume
        run:  echo "::set-output name=volume::$(doctl compute volume create backup-storage --region nyc1 --size 100GB --format ID --no-header)"
      
#       - name: test
#         run: |
#           ssh-keyscan ${{ steps.droplet.outputs.ip }} >> ~/.ssh/known_hosts
      
      - name: attach volume
        run: doctl compute volume-action attach "${{ steps.volume.outputs.volume }}" "${{ steps.droplet.outputs.id  }}"

      - name: Setup Ansible Inventory
        run: echo "$INVENTORY_CONTENTS" > inventory.ini
        env:
          INVENTORY_CONTENTS: |
            [web]
            qwerty ansible_host=${{ steps.droplet.outputs.ip }}
            
      - name: Test
        run: ansible-playbook -i inventory.ini test.yml -e "extra_host=qwerty" --user root --key-file "~/.ssh/id_rsa"

      - name: Rm ssh keys
        if: always()
        run: doctl compute ssh-key delete "${{ steps.create_ssh_key.outputs.ssh }}" --force || true
        
      - name: Destroy Droplet
        if: always()
        run: |
         doctl compute volume-action detach "${{ steps.volume.outputs.volume }}" "${{ steps.droplet.outputs.id }}" || true
         doctl compute droplet delete deploy-test --force || true
        
      - name: Detach and rm volume 
        if: always()
        run: |
         doctl compute volume delete "${{ steps.volume.outputs.volume }}" --force || true   
         

