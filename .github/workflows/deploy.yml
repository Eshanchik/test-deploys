name: Deployment

on:
  schedule:
    - cron: '0 3 * * *'

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: setup python
        uses: actions/setup-python@v2

      - name: Install requirements
        run: pip install ansible

      - name: Generate SSH key pair
        id: generate_ssh_key
        run: |
          ssh-keygen -q -t rsa -N "" -f ~/.ssh/id_rsa
          echo "::set-output name=private_key::$(cat ~/.ssh/id_rsa)"
          echo "::set-output name=public_key::$(cat ~/.ssh/id_rsa.pub)"

      - name: Intall doctl
        uses: digitalocean/action-doctl@v2
        with:
            token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: test
        run: doctl projects list
        
      - name: test
        run: doctl projects update beab609f-428f-42ce-b5a6-fadfa9d9d7cf --is_default=true

      - name: Create SSH key in DigitalOcean
        id: create_ssh_key
        run: |
         echo "::set-output name=ssh::$(doctl compute ssh-key create deploys --public-key $( cat temp.key.pub ) --format ID --no-header)"
         
      - name: Create Droplet
        run: doctl compute droplet create deploy-test --image debian-10-x64 --region nyc1 --size s-1vcpu-2gb --ssh-keys "${{ steps.create_ssh_key.outputs.ssh }}"

      - name: Wait create Droplet
        run: sleep 120s
  
      - name: Get Droplet IP
        id: droplet
        run: echo "::set-output name=ip::$(doctl compute droplet list deploy-test --format PublicIPv4 --no-header)"

      - name: Setup Ansible Inventory
        run: echo "$INVENTORY_CONTENTS" > inventory.ini
        env:
          INVENTORY_CONTENTS: |
            [web]
            qwerty ansible_host=${{ steps.droplet.outputs.ip }}
            
      - name: Known host
        run: ssh-keyscan ${{ steps.droplet.outputs.ip }} >> ~/.ssh/known_hosts
            
      - name: Test
        run: ansible-playbook -i inventory.ini ansible/test.yml --user root 

      # - name: Deploy common.yml
      #   run: ansible-playbook -i env/prod ansible/common.yml

      # - name: Deploy parity_explorer_v2.yml playbooks
      #   run: ansible-playbook -i env/prod ansible/parity_explorer_v2.yml

      # - name: Health check
      #   id: health_check
      #   run: |
      #     status="false"
      #     count=0
      #     while [[ "$status" != "true" && $count -lt 60 ]]; do
      #       sleep 60
      #       response=$(curl -s -X POST -H "Content-Type: application/json" -d '{"method":"eth_syncing","params":[],"id":1,"jsonrpc":"2.0"}' http://${{ steps.droplet.outputs.ip }}:8545)
      #       result=$(echo "$response" | jq -r '.result')
      #       if [[ "$result" == "false" ]]; then
      #         status="true"
      #       fi
      #       ((count++))
      #     done

      # - name: Backup parity fatdb
      #   run: ansible-playbook -i env/prod ansible/parity_fatdb_backup.yml

      # - name: Deploy explorer 
      #   run: ansible-playbook -i env/prod ansible/explorer_backend_v2.yml

      # Health check

      # - name: Backup explorer
      #   run: ansible-playbook -i env/prod ansible/explorer_v2_backup.yml

      - name: Rm ssh keys
        run: doctl compute ssh-key delete "${{ steps.create_ssh_key.outputs.ssh }}" --force

      - name: Destroy Droplet
        run: doctl compute droplet delete deploy-test --force
